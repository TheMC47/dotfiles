#+TITLE: My emacs doom configuration
#+AUTHOR: Yecine Megdiche
#+EMAIL: yecine.megdiche@gmail.com
#+LANGUAGE: en
#+STARTUP: inlineimages
#+PROPERTY: header-args :results silent :padline no
#+OPTIONS: toc:2
Welcome to my emacs-config. I use [[https://github.com/hlissner/doom-emacs][doom-emacs]] as my distribution, so the config will only work on that. I kept a lot of the comments from the original example, as they are really helpful.

* Table of Contents :TOC:
- [[#x-general][[X] General]]
  - [[#info][Info]]
- [[#-flychek-linting][[?] Flychek: Linting]]
- [[#no-company-auto-complete][NO Company: Auto-Complete]]
- [[#x-ui][[X] UI]]
- [[#kill-orgmode][KILL Orgmode]]
- [[#no-lsp][NO LSP]]
- [[#x-dired][[X] Dired]]
- [[#x-snippets-yasnippet][[X] Snippets: YASnippet]]
- [[#--ivy][[ ] Ivy]]
- [[#x-haskell][[X] Haskell]]
- [[#x-python][[X] Python]]
- [[#x-pdf][[X] PDF]]
- [[#--latex][[ ] Latex]]
- [[#no-isabelle][NO Isabelle]]
- [[#wait-java][WAIT Java]]
- [[#no-c][NO C++]]
- [[#projectile][Projectile]]
- [[#wait-email][WAIT EMail]]
- [[#wait-calendar][WAIT Calendar]]
- [[#no-tabs][NO Tabs]]
- [[#wait-sql][WAIT SQL]]
- [[#--notes][[ ] Notes]]

* [X] General
** Info
Place your private configuration here! Remember, you do not need to run 'doom refresh' after modifying this file!
#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC
These are used for a number of things, particularly for GPG configuration, some email clients, file templates and snippets.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Yecine Megdiche"
      user-mail-address "yecine.megdiche@gmail.com")
#+END_SRC
* [?] Flychek: Linting
#+BEGIN_SRC emacs-lisp
(after! flycheck
  (setq flycheck-check-syntax-automatically '(mode-enabled new-line save idle-change))
  (setq flycheck-idle-change-delay '0))
(setq flycheck-global-modes '(not org-mode))
#+END_SRC

* NO Company: Auto-Complete
I don't like to wait for the auto-complete prompt
#+BEGIN_SRC emacs-lisp
(setq company-idle-delay 0)
#+END_SRC
* [X] UI
Don't truncate long lines
#+BEGIN_SRC emacs-lisp
(setq truncate-lines nil)
#+END_SRC
Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:
+ ~doom-font~
+ ~doom-variable-pitch-font~
+ ~doom-big-font~ -- used for ~doom-big-font-mode~
They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string. You generally only need these two:
#+BEGIN_SRC emacs-lisp
(setq ;; doom-font (font-spec :family "Source Code Pro"
      ;;                      :size (pcase (system-name)
      ;;                              ("yecine-xps159560" 26)
      ;;                              (_ 14)))
      doom-variable-pitch-font (font-spec :family "sans")
      doom-font (font-spec :family "Hasklig"
                           :size (pcase (system-name)
                                   ("yecine-xps159560" 26)
                                   (_ 14))))
#+END_SRC
There are two ways to load a theme. Both assume the theme is installed and available. You can either set ~doom-theme~ or manually load a theme with the ~load-theme~ function. These are the defaults.
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-nord)
#+END_SRC
Another bright theme I like to use is ~doom-one-light~
For the line-numbers, these are the possible values:
+ ~relative~
+ ~absolute~
+ ~nil~, which disables the number line
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type `relative)
#+END_SRC
This makes treemacs prettier
#+BEGIN_SRC emacs-lisp
(setq doom-themes-treemacs-theme "doom-colors")
#+END_SRC
Use space indentation everywhere
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC
And finally, spice up the splash screen
#+begin_src emacs-lisp
(setq fancy-splash-image (concat doom-private-dir "club-mate.svg"))
#+end_src
* KILL Orgmode
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/")
(setq org-agenda-files (list "~/org"))
(require 'org-ref)
;; TODO fix this
(setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")
      org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted")))
(add-to-list 'org-latex-classes
             '("article"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
* NO LSP
#+BEGIN_SRC emacs-lisp
(setq lsp-idle-delay 2.0)
#+END_SRC
* [X] Dired
Use ~ in a ~dired~ buffer to go to the home directory.
#+BEGIN_SRC emacs-lisp
(defun my/dired-go-home ()
  (interactive)
  (dired "~"))

(map!
 :after dired
 :map dired-mode-map
 :n "~" #'my/dired-go-home)

#+END_SRC
* [X] Snippets: YASnippet
A dedicated key (other than ~TAB~) for expanding snippets.
#+BEGIN_SRC emacs-lisp
(map!
 :after yasnippet
 :map yas-minor-mode-map
 :i "C-," #'yas-expand)

#+END_SRC
* [ ] Ivy
With this, ~C-o~ will show a list of available actions in a hydra.
#+BEGIN_SRC emacs-lisp
(setq ivy-read-action-function #'ivy-hydra-read-action)
#+END_SRC
You can mark multiple entires with ~M-m~. This is helpful for example for adding parameters to constructors
#+BEGIN_SRC emacs-lisp
(map! :after ivy
      :map ivy-minibuffer-map "M-m" #'ivy-mark)
#+END_SRC
* [X] Haskell
#+BEGIN_SRC emacs-lisp
;; (use-package lsp-haskell
;;  :ensure t
;;  :config
;;  (setq lsp-haskell-process-path-hie "haskell-language-server-wrapper")
;;  ;; Comment/uncomment this line to see interactions between lsp client/server.
;;  (setq lsp-log-io t)
;; )
;; (plist-put! +ligatures-extra-symbols
;;   :bot "‚ä•")

(setq lsp-haskell-formatting-provider "brittany")
;; (after! haskell-mode
;;   (set-ligatures! 'haskell-mode
;;     :bot "undefined"
;;     :null "mempty"))
#+END_SRC
* [X] Python
#+begin_src emacs-lisp
(add-hook! python-mode
  (flycheck-select-checker 'python-flake8))
(put 'py-isort-options 'safe-local-variable #'listp)
#+end_src
* [X] PDF
- Some customization to set midnight clors and resize factor
#+BEGIN_SRC emacs-lisp
(setq pdf-view-midnight-colors '("dark gray" . "#012B36"))
(setq pdf-view-resize-factor 1.1)
#+END_SRC
* [ ] Latex
- Disable Company mode. I don't find it particularly useful, it just overcrowds the screen. Using snippets instead is better.
#+BEGIN_SRC emacs-lisp
(setq company-global-modes '(not latex-mode))
#+END_SRC
* NO Isabelle
Say goodbye to jEdit!
First, follow the instructions at https://github.com/m-fleury/isabelle-release/tree/Isabelle2020-more-vscode/src/Tools/emacs-lsp/spacemacs_layers/isabelle to build isabelle.
Afterwards, this (together with the package declarations in ~packages.el~) should allow ~lsp-isar~ to play nicely with doom.
#+BEGIN_SRC emacs-lisp
(use-package! isar-mode
  :ensure t
  :mode "\\.thy\\'")

(use-package! isar-goal-mode
  :ensure t)

;; TODO this is terribly slow, debug it, ask on zulip
(use-package lsp-isar
  :after isar-mode isar-goal-mode
  :commands lsp-isar-define-client-and-start lsp-isar-open-output-and-progress-right-spacemacs
  :hook ((isar-mode . flycheck-mode)
         (isar-mode . lsp-isar-define-client-and-start)
         (isar-mode . yas-minor-mode)
         (lsp-isar-init . lsp-isar-open-output-and-progress-right-spacemacs)
         ;; (isar-mode . display-line-numbers-mode)
         )
  :config
  (setq lsp-response-timeout 1200)
  (setq lsp-restart 'ignore)
  (setq lsp-prefer-flymake nil)
  (setq lsp-isar-path-to-isabelle "~/isabelle-release")
  (push (concat lsp-isar-path-to-isabelle "/src/Tools/emacs-lsp/yasnippet") yas-snippet-dirs)
  (yas-reload-all)
  :init
  (setq display-line-numbers-type `relative))

(map! :map isar-mode-map
      :leader
      :nv "i i" 'lsp-isar-insert-sledgehammer-and-call
          "i s" 'lsp-isar-sledgehammer-interface
          "i t" 'lsp-isar-insert-try0)
#+END_SRC
* WAIT Java
#+BEGIN_SRC emacs-lisp
(require 'gradle-mode)
(gradle-mode 1)
(setq lsp-java-vmargs '("-noverify" "-Xmx1G" "-XX:+UseG1GC" "-XX:+UseStringDeduplication" "-javaagent:/home/yecinem/lombok.jar" "-Xbootclasspath/a:/home/yecinem/lombok.jar"))
(setq lsp-java-format-settings-url "file:///home/yecinem/.doom.d/eclipse-java-google-style.xml")
#+END_SRC
* NO C++
#+begin_src emacs-lisp
;; (push (c++-mode) +ligatures-in-mode)
#+end_src
* DONE Projectile
Projectile is just great. Here I register django as a custom project type
#+BEGIN_SRC emacs-lisp

(defun open-magit-or-dired (DIRECTORY)
  (interactive)
  (let ((toplevel (magit-toplevel DIRECTORY)))
          (setq DIRECTORY (file-name-as-directory
                           (expand-file-name DIRECTORY)))
          (if (and toplevel (file-equal-p DIRECTORY toplevel))
              (magit-status-setup-buffer DIRECTORY)
            (dired DIRECTORY))))

(setq +workspaces-switch-project-function #'open-magit-or-dired)

(after! projectile
  (projectile-register-project-type 'npm '("manage.py")
                                    :test "python manage.py test"
                                    :run "python manage.py runserver"))
  ;; (projectile-register-project-type 'npm ''))
 #+END_SRC
* WAIT EMail
#+begin_src emacs-lisp
(set-email-account! "yecine.megdiche@gmail.com" t)
#+end_src
* WAIT Calendar
#+begin_src emacs-lisp
(setq calendar-islamic-all-holidays-flag 't
      holiday-general-holidays 'nil
      holiday-christian-holidays 'nil
      holiday-hebrew-holidays 'nil
      holiday-chinese-holidays 'nil
      holiday-bahai-holidays 'nil)

(after! calfw
  (setq calendar-week-start-day 1))

(defun my-open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source "Green")  ; orgmode source
   )))

#+end_src
* NO Tabs
Doom provides integration with centaur tabs. This is some aestetic configuration for the module
#+begin_src emacs-lisp
(after! centaur-tabs
  (setq centaur-tabs-set-bar 'under
        x-underline-at-descent-line t
        centaur-tabs-style "slant")
  (centaur-tabs-group-by-projectile-project))
#+end_src
* WAIT SQL
#+begin_src emacs-lisp
(defun sql-beautify-region (beg end)
    "Beautify SQL in region between beg and END.
Dependency:
npm i -g sql-formatter-cli"
    (interactive "r")
    (save-excursion
      (shell-command-on-region beg end "sql-formatter-cli" nil t)))
  (defun sql-beautify-buffer ()
    "Beautify SQL in buffer."
    (interactive)
    (sql-beautify-region (point-min) (point-max)))
  (add-hook 'sql-mode-hook '(lambda ()
                              ;; beautify region or buffer
                              (local-set-key (kbd "C-c t") 'sql-beautify-region)))

#+end_src

* [ ] Notes
 - The ~onsave~ flag for the ~format~ module is removed in favor of a per-project configuration. In order to activate auto-formatting on save in a directory for a language, add this code to the ~.dir-locals.el~ file.
#+BEGIN_SRC emacs-lisp
;((nil . ((eval . (add-hook 'python-mode-hook #'format-all-mode)))))
;; (plist-put! +ligatures-extra-symbols :return "‚üº ")
(setq find-file-visit-truename nil)
#+END_SRC
